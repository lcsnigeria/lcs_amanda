/**
 * LCS Amanda - Secure AJAX Request Library
 * 
 * Copyright (c) 2025 Loaded Channel Solutions
 * Licensed under the MIT License. See LICENSE file for details.
 * 
 * Please do not edit this file unless you know what you are doing.
 * 
 * @package   LCS Amanda
 * @version   1.0.0
 * @license   MIT
 * @author    LOADED CHANNEL SOLUTIONS LTD, Chinonso Justice
 * @link      https://lcs.ng/amanda
 */


const siteDomain = window.location.origin;

/**
 * Class for making secure AJAX requests using lcs_ajax.
 */
class amandaAjaxRequest {
    /**
     * Initializes the AJAX request instance.
     * 
     * @param {Object|FormData} data - The request payload (JSON object or FormData).
     * @param {string} [method='POST'] - The HTTP method (e.g., 'GET', 'POST').
     * @param {Object} [headers={}] - Additional headers for the request.
     */
    constructor(data = {}, method = 'POST', headers = {}) {
        this.data = data;
        this.method = method;
        this.headers = headers;
        this.ajaxurl = `${siteDomain}/amanda_ajax.php`; // Default API endpoint
        this.nonce_name = 'amanda_nonce'; // Default nonce name

        // Ensure data is either an instance of FormData or a plain object
        if (!(this.data instanceof FormData) && typeof this.data !== 'object') {
            throw new Error('Data must be an object or FormData.');
        }

        // Restructure data to include the nonce
        this.#restructureData();
    }

    /**
     * Sends the AJAX request using lcs_ajax.
     * 
     * @returns {Promise<Object>} - Resolves with the server response.
     * @throws {Error} - If the request fails.
     */
    async send() {
        try {
            const response = await lcsSendAjaxRequest(this.data, this.ajaxurl, this.method, this.headers);
            return response; // Response is already parsed JSON
        } catch (error) {
            console.error('AJAX Request Error:', error);
            throw error;
        }
    }

    /**
     * Restructures data to include the nonce.
     * If data is FormData, appends the nonce; otherwise, adds it as a property.
     * 
     * @private
     */
    #restructureData() {
        if (this.#isFormData()) {
            this.data.append('nonce_name', this.nonce_name);
        } else {
            this.data = { ...this.data, nonce_name: this.nonce_name };
        }
    }

    /**
     * Checks if the provided data is an instance of FormData.
     * 
     * @returns {boolean} - True if data is FormData, otherwise false.
     * @private
     */
    #isFormData() {
        return this.data instanceof FormData;
    }
}